#!/usr/bin/env python3
"""
Script para probar la conexi√≥n IPv6 con Supabase
"""
import os
import sys
import psycopg2
from dotenv import load_dotenv

load_dotenv()

def test_connection_methods():
    """Probar diferentes m√©todos de conexi√≥n"""
    
    # M√©todo 1: DATABASE_URL con pooler (puerto 6543)
    database_url = os.environ.get('DATABASE_URL')
    if database_url and ':6543/' in database_url:
        database_url_pooled = database_url.replace(':5432/', ':6543/')
    else:
        database_url_pooled = database_url
    
    print("üîç Probando conexiones a Supabase...")
    print(f"Host: {os.environ.get('DB_HOST')}")
    print(f"Usuario: {os.environ.get('DB_USER')}")
    print(f"Base de datos: {os.environ.get('DB_NAME')}")
    print()
    
    # Test 1: Pooler con par√°metros IPv6
    print("1Ô∏è‚É£ Probando conexi√≥n con pooler (puerto 6543) + par√°metros IPv6...")
    try:
        conn_string = f"{database_url_pooled}?sslmode=require&connect_timeout=60&statement_timeout=300000&idle_in_transaction_session_timeout=300000"
        conn = psycopg2.connect(conn_string)
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ √âXITO: {version[0][:50]}...")
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Test 2: Conexi√≥n directa (puerto 5432)
    print("\n2Ô∏è‚É£ Probando conexi√≥n directa (puerto 5432)...")
    try:
        conn_string = f"{database_url}?sslmode=require&connect_timeout=60"
        conn = psycopg2.connect(conn_string)
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ √âXITO: {version[0][:50]}...")
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Test 3: Par√°metros individuales con pooler
    print("\n3Ô∏è‚É£ Probando con par√°metros individuales (pooler)...")
    try:
        conn = psycopg2.connect(
            host=os.environ.get('DB_HOST'),
            port=6543,
            database=os.environ.get('DB_NAME'),
            user=os.environ.get('DB_USER'),
            password=os.environ.get('DB_PASSWORD'),
            sslmode='require',
            connect_timeout=60,
            application_name='test_ipv6_connection'
        )
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ √âXITO: {version[0][:50]}...")
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Test 4: Par√°metros individuales directo
    print("\n4Ô∏è‚É£ Probando con par√°metros individuales (directo)...")
    try:
        conn = psycopg2.connect(
            host=os.environ.get('DB_HOST'),
            port=6543,
            database=os.environ.get('DB_NAME'),
            user=os.environ.get('DB_USER'),
            password=os.environ.get('DB_PASSWORD'),
            sslmode='require',
            connect_timeout=60,
            application_name='test_ipv6_connection'
        )
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ √âXITO: {version[0][:50]}...")
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    return False

def main():
    print("üß™ Test de Conexi√≥n IPv6 para Supabase en Railway")
    print("=" * 50)
    
    # Verificar variables de entorno
    required_vars = ['DB_HOST', 'DB_NAME', 'DB_USER', 'DB_PASSWORD']
    missing_vars = [var for var in required_vars if not os.environ.get(var)]
    
    if missing_vars:
        print(f"‚ùå Variables de entorno faltantes: {missing_vars}")
        sys.exit(1)
    
    success = test_connection_methods()
    
    if success:
        print("\nüéâ Al menos una conexi√≥n fue exitosa!")
        print("üí° Usa el m√©todo que funcion√≥ en tu aplicaci√≥n.")
    else:
        print("\nüòû Ninguna conexi√≥n fue exitosa.")
        print("üí° Verifica tus credenciales y la conectividad de red.")
        sys.exit(1)

if __name__ == '__main__':
    main()